# For full config options, check the docs:
#    docs.serverless.com

service: auction-service
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '^3.34.0'

plugins:
  - serverless-plugin-typescript

provider:
  name: aws # serverless provider
  runtime: nodejs18.x
  lambdaHashingVersion: 20201221
  memorySize: 256 #
  stage: ${opt:stage, 'dev'} #
  region: eu-west-2
  environment:
    AUCTIONS_TABLE_NAME: ${self:custom.AuctionsTable.name}
    MAIL_QUEUE_URL: ${self:custom.MailQueue.url}
    AUCTIONS_BUCKET_NAME: ${self:custom.AuctionsBucket.name}
  iam:
    role:
      statements:
        - ${file(iam/AuctionsTableIAM.yml):AuctionsTableIAM}
        - ${file(iam/AuctionsBucketIAM.yml):AuctionsBucketIAM}
        - ${file(iam/MailQueueIAM.yml):MailQueueIAM}

functions:
  createAuction:
    handler: src/handlers/createAuction.handler
    description: Create new auction
    events:
      - http:
          path: /auctions
          method: post
          cors: true # configure cors on endpoint to be able to use from the front-end
          authorizer: ${self:custom.authorizer} # specify authorization middleware lambda function - using Function Arn
  getAuctions:
    handler: src/handlers/getAuctions.handler
    events:
      - http:
          path: /auctions
          method: get
          cors: true # configure cors on endpoint to be able to use from the front-end
          authorizer: ${self:custom.authorizer} # specify authorization middleware lambda function - using Function Arn
  getAuction:
    handler: src/handlers/getAuction.handler
    events:
      - http:
          path: /auctions/{auctionId}
          method: get
          cors: true # configure cors on endpoint to be able to use from the front-end
          authorizer: ${self:custom.authorizer} # specify authorization middleware lambda function - using Function Arn
  placeBid:
    handler: src/handlers/placeBid.handler
    events:
      - http:
          path: /auctions/{auctionId}/bid
          method: patch
          cors: true # configure cors on endpoint to be able to use from the front-end
          authorizer: ${self:custom.authorizer} # specify authorization middleware lambda function - using Function Arn
  uploadAuctionPicture:
    handler: src/handlers/uploadAuctionPicture.handler
    events:
      - http:
          path: /auctions/{auctionId}/picture
          method: patch
          cors: true # configure cors on endpoint to be able to use from the front-end
          authorizer: ${self:custom.authorizer} # specify authorization middleware lambda function - using Function Arn
  processAuctions:
    handler: src/handlers/processAuctions.handler
    # events:
    #   - schedule: rate(1 minute) # for dev, this would be triggered manually using sls invoke processAuctions

resources:
  Resources:
    AuctionsTable: ${file(resources/AuctionsTable.yml):AuctionsTable}
    AuctionsBucket: ${file(resources/AuctionsBucket.yml):AuctionsBucket}
    AuctionsBucketPolicy: ${file(resources/AuctionsBucket.yml):AuctionsBucketPolicy}

custom:
  authorizer: arn:aws:lambda:${aws:region}:${aws:accountId}:function:auth-service-${self:provider.stage}-auth
  AuctionsTable:
    name:
      Ref: AuctionsTable
    arn:
      Fn::GetAtt: [AuctionsTable, Arn]
  MailQueue:
    arn: ${cf:notification-service-${self:provider.stage}.MailQueueArn}
    url: ${cf:notification-service-${self:provider.stage}.MailQueueUrl}
  AuctionsBucket:
    name: devdezyn-auctions-bucket-gq64s-${self:provider.stage} # Ensure that bucket name is all lowercase
